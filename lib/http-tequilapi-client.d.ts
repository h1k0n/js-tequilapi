import { HttpInterface } from './adapters/interface';
import { TequilapiClient } from './client';
import { AccessPolicyDTO } from './dto/access-policies';
import { ConnectionIPDTO } from './dto/connection-ip';
import { ConnectionSessionDTO } from './dto/connection-session';
import { ConnectionStatisticsDTO } from './dto/connection-statistics';
import { ConnectionStatusDTO } from './dto/connection-status-dto';
import { ConsumerLocationDTO } from './dto/consumer-location';
import { IdentityDTO } from './dto/identity';
import { IdentityPayoutDTO } from './dto/identity-payout';
import { IdentityRegistrationDTO } from './dto/identity-registration/identity-registration';
import { NatStatusDTO } from './dto/nat-status-dto';
import { NodeHealthcheckDTO } from './dto/node-healthcheck';
import { ProposalDTO } from './dto/proposal';
import { ConnectionRequest } from './dto/query/connection-request';
import { ProposalQueryOptions } from './dto/query/proposals-query-options';
import { ServiceInfoDTO } from './dto/service-info';
import { ServiceRequest } from './dto/service-request';
import { ServiceSessionDTO } from './dto/service-session';
export declare class HttpTequilapiClient implements TequilapiClient {
    http: HttpInterface;
    constructor(http: HttpInterface);
    healthCheck(timeout?: number): Promise<NodeHealthcheckDTO>;
    natStatus(): Promise<NatStatusDTO>;
    stop(): Promise<void>;
    location(timeout?: number): Promise<ConsumerLocationDTO>;
    identitiesList(): Promise<IdentityDTO[]>;
    identityCreate(passphrase: string): Promise<IdentityDTO>;
    identityUnlock(id: string, passphrase: string, timeout?: number): Promise<void>;
    identityRegistration(id: string): Promise<IdentityRegistrationDTO>;
    identityPayout(id: string): Promise<IdentityPayoutDTO>;
    updateIdentityPayout(id: string, ethAddress: string): Promise<void>;
    findProposals(options?: ProposalQueryOptions): Promise<ProposalDTO[]>;
    connectionCreate(request: ConnectionRequest, timeout?: number | undefined): Promise<ConnectionStatusDTO>;
    connectionStatus(): Promise<ConnectionStatusDTO>;
    connectionCancel(): Promise<void>;
    connectionIP(timeout?: number): Promise<ConnectionIPDTO>;
    connectionStatistics(): Promise<ConnectionStatisticsDTO>;
    connectionSessions(): Promise<ConnectionSessionDTO[]>;
    serviceList(): Promise<ServiceInfoDTO[]>;
    serviceGet(id: string): Promise<ServiceInfoDTO>;
    serviceStart(request: ServiceRequest, timeout?: number | undefined): Promise<ServiceInfoDTO>;
    serviceStop(serviceId: string): Promise<void>;
    serviceSessions(): Promise<ServiceSessionDTO[]>;
    accessPolicies(): Promise<AccessPolicyDTO[]>;
}
